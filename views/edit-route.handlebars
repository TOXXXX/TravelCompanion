<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Edit Route - {{route.routeName}}</title>
  <link rel="stylesheet" href="/css/styles.css">
</head>
<body>
  <div class="container">
    <h2 style="text-align: center;">Edit Route: {{route.routeName}}</h2>
    
    <div class="map-box">
      <div class="map-container">
        {{#if route.mapDataUrl}}
          <img id="static-map" src="{{route.mapDataUrl}}" alt="Generated Map" />
        {{else}}
          <img id="static-map" src="https://via.placeholder.com/800x400?text=Map+will+appear+here" alt="Map Placeholder" />
        {{/if}}
      </div>
    </div>
    
    <div class="route-form">
      <form id="edit-route-form" action="/route/edit/{{route._id}}" method="POST">
        <div class="form-group">
          <label for="route-name">Route Name</label>
          <input type="text" id="route-name" name="route-name" value="{{route.routeName}}" required>
          <span class="error-message" id="route-name-error" aria-live="assertive"></span>
        </div>
        <div class="form-group">
          <label for="route-description">Description</label>
          <textarea id="route-description" name="route-description" rows="3">{{route.routeDesc}}</textarea>
          <span class="error-message" id="route-description-error" aria-live="assertive"></span>
        </div>
        <div class="form-group">
          <label for="route-duration">Trip Duration (Days)</label>
          <input type="number" id="route-duration" name="route-duration" value="{{route.tripDuration}}" min="1" required>
          <span class="error-message" id="route-duration-error" aria-live="assertive"></span>
        </div>
        <div class="form-group">
          <label>Waypoints</label>
          <div class="form-group waypoint">
            <label for="geocoder-1">Origin</label>
            <div id="geocoder-1" class="geocoder"></div>
            <input type="hidden" readonly="true" id="waypoint-1-coordinates" name="waypoint-1-coordinates" value="{{route.origin.coordinates.[0]}},{{route.origin.coordinates.[1]}}">
            <input type="text" readonly="true" id="waypoint-1-name" name="waypoint-1-name" value="{{route.origin.name}}">
            <textarea id="waypoint-1-description" name="waypoint-1-description" placeholder="Description (optional)" rows="2">{{route.origin.description}}</textarea>
            <span class="error-message" id="waypoint-1-description-error" aria-live="assertive"></span>
          </div>
          <div class="form-group waypoint">
            <label for="geocoder-2">Destination</label>
            <div id="geocoder-2" class="geocoder"></div>
            <input type="hidden" readonly="true" id="waypoint-2-coordinates" name="waypoint-2-coordinates" value="{{route.destination.coordinates.[0]}},{{route.destination.coordinates.[1]}}">
            <input type="text" readonly="true" id="waypoint-2-name" name="waypoint-2-name" value="{{route.destination.name}}">
            <textarea id="waypoint-2-description" name="waypoint-2-description" placeholder="Description (optional)" rows="2">{{route.destination.description}}</textarea>
            <span class="error-message" id="waypoint-2-description-error" aria-live="assertive"></span>
          </div>
        </div>
        <div class="form-group">
          <label for="route-type">Route Type</label>
          <select id="route-type" name="route-type" required>
            <option value="" disabled>Select route type</option>
            <option value="driving" {{#ifEquals route.routeType "driving"}}selected{{/ifEquals}}>Driving</option>
            <option value="walking" {{#ifEquals route.routeType "walking"}}selected{{/ifEquals}}>Walking</option>
            <option value="cycling" {{#ifEquals route.routeType "cycling"}}selected{{/ifEquals}}>Cycling</option>
          </select>
        </div>
        <div class="button-container">
          <button class="btn update-btn" type="submit">Update Route</button>
          <a href="/route/{{route._id}}" class="btn cancel-btn">Cancel</a>
        </div>
      </form>
    </div>
  </div>

  <script>
    mapboxgl.accessToken = '{{MAPBOX_ACCESS_TOKEN}}';
  
    const waypoints = [
      { geocoderId: 'geocoder-1', hiddenInputId: 'waypoint-1-coordinates', nameInputId: 'waypoint-1-name' },
      { geocoderId: 'geocoder-2', hiddenInputId: 'waypoint-2-coordinates', nameInputId: 'waypoint-2-name' },
    ];
  
    waypoints.forEach(({ geocoderId, hiddenInputId, nameInputId }) => {
      const geocoder = new MapboxGeocoder({
        accessToken: mapboxgl.accessToken,
        mapboxgl: mapboxgl,
        placeholder: 'Search for a location...',
      });
  
      document.getElementById(geocoderId).appendChild(geocoder.onAdd());
  
      geocoder.on('result', (e) => {
        const { center, place_name } = e.result;
        document.getElementById(hiddenInputId).value = `${center[0]},${center[1]}`;
        document.getElementById(nameInputId).value = place_name;
      });
    });
  
    // Client-Side Validation for Edit Form
    const routeForm = document.getElementById('edit-route-form');
    const routeNameInput = document.getElementById('route-name');
    const routeNameError = document.getElementById('route-name-error');
  
    const routeDescriptionInput = document.getElementById('route-description');
    const routeDescriptionError = document.getElementById('route-description-error');
  
    const routeDurationInput = document.getElementById('route-duration');
    const routeDurationError = document.getElementById('route-duration-error');
  
    const waypoint1DescriptionInput = document.getElementById('waypoint-1-description');
    const waypoint1DescriptionError = document.getElementById('waypoint-1-description-error');
  
    const waypoint2DescriptionInput = document.getElementById('waypoint-2-description');
    const waypoint2DescriptionError = document.getElementById('waypoint-2-description-error');
  
    if (routeForm && routeNameInput && routeNameError &&
        routeDescriptionInput && routeDescriptionError &&
        routeDurationInput && routeDurationError &&
        waypoint1DescriptionInput && waypoint1DescriptionError &&
        waypoint2DescriptionInput && waypoint2DescriptionError) {
  
        function validateRouteName() {
          const routeNameRegex = /^[A-Za-z_]+$/;
          const value = routeNameInput.value.trim();
          if (!routeNameRegex.test(value)) {
            routeNameError.textContent = 'Route name can only contain letters and underscore.';
            routeNameError.classList.add('active');
            routeNameInput.classList.add('invalid');
            return false;
          } else {
            routeNameError.textContent = '';
            routeNameError.classList.remove('active');
            routeNameInput.classList.remove('invalid');
            return true;
          }
        }
  
        function validateDescription(input, errorElement) {
          const descriptionRegex = /^[A-Za-z0-9\s.,!?-]*$/;
          const value = input.value.trim();
          if (!descriptionRegex.test(value)) {
            errorElement.textContent = 'Description can only contain letters, numbers, spaces, and common punctuation (.,!?-).';
            errorElement.classList.add('active');
            input.classList.add('invalid');
            return false;
          } else {
            errorElement.textContent = '';
            errorElement.classList.remove('active');
            input.classList.remove('invalid');
            return true;
          }
        }
  
        function validateRouteDuration() {
          const value = routeDurationInput.value.trim();
          const duration = Number(value);
          if (value === '' || isNaN(duration) || duration < 1) {
            routeDurationError.textContent = 'Trip duration must be a number greater than or equal to 1.';
            routeDurationError.classList.add('active');
            routeDurationInput.classList.add('invalid');
            return false;
          } else {
            routeDurationError.textContent = '';
            routeDurationError.classList.remove('active');
            routeDurationInput.classList.remove('invalid');
            return true;
          }
        }
  
      routeForm.addEventListener('submit', function(event) {
        const isRouteNameValid = validateRouteName();
        const isRouteDescriptionValid = validateDescription(routeDescriptionInput, routeDescriptionError);
        const isRouteDurationValid = validateRouteDuration();
        const isWaypoint1DescriptionValid = validateDescription(waypoint1DescriptionInput, waypoint1DescriptionError);
        const isWaypoint2DescriptionValid = validateDescription(waypoint2DescriptionInput, waypoint2DescriptionError);
  
        if (!isRouteNameValid || !isRouteDescriptionValid || 
            !isWaypoint1DescriptionValid || !isWaypoint2DescriptionValid) {
          event.preventDefault();
          console.log('Form submission prevented due to validation errors.');
        } else {
          console.log('Form validation passed. Submitting form.');
        }
      });
  
      routeNameInput.addEventListener('input', validateRouteName);
  
      routeDescriptionInput.addEventListener('input', function() {
        validateDescription(routeDescriptionInput, routeDescriptionError);
      });
  
      routeDurationInput.addEventListener('input', validateRouteDuration);
  
      waypoint1DescriptionInput.addEventListener('input', function() {
        validateDescription(waypoint1DescriptionInput, waypoint1DescriptionError);
      });
  
      waypoint2DescriptionInput.addEventListener('input', function() {
        validateDescription(waypoint2DescriptionInput, waypoint2DescriptionError);
      });
    } else {
      console.error('Form, Route Name input, or Error message container not found.');
    }
  </script>
</body>
</html>
